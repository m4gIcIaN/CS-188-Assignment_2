openapi: 3.0.0
info:
  version: 1.0.0
  title: Spikes API
  description: RESTful API for Drake University Apparel
servers:
  - url: http://localhost:5555
    description: Local Development
  - url: https://api-dev.drake.drake/
    description: Dev Environment
  - url: https://api.drake.drake/
    description: Prod Environment
paths:
  /items:
    get:
      description: Returns a collection of items
      responses:
        "200":
          description: A collection of items
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Items"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      description: Adds a new item
      requestBody:
        description: Item to add
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Item"
      responses:
        "201":
          description: Item successfully created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Item"
        "303":
          description: See Other
          headers:
            Location:
              schema:
                type: string
              description: Location of an existing item
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
  "/items/{itemId}":
    get:
      description: Returns an item
      parameters:
        - name: itemId
          in: path
          description: Identifier for an item
          required: true
          schema:
            type: string
      responses:
        "200":
          description: An item
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Item"
        "404":
          description: Item not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemNotFound"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      description: Updates an item
      requestBody:
        description: Item to update
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Item"
      parameters:
        - name: itemId
          in: path
          description: Identifier for an item
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Item successfully updated
        "404":
          description: Item not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemNotFound"
    delete:
      description: Deletes an item
      parameters:
        - name: itemId
          in: path
          description: Identifier for an item
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Item successfully deleted
        "404":
          description: Item not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemNotFound"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
                
  /customers:
    get:
      description: Returns a collection of customers
      responses:
        "200":
          description: A collection of customers
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Customers"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      description: Adds a new customer
      requestBody:
        description: customer to add
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Customer"
      responses:
        "201":
          description: Customer successfully created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Customer"
        "303":
          description: See Other
          headers:
            Location:
              schema:
                type: string
              description: Location of an existing customer
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
  "/customers/{customerId}":
    get:
      description: Returns a Customer
      parameters:
        - name: customerId
          in: path
          description: Identifier for a customer
          required: true
          schema:
            type: string
      responses:
        "200":
          description: A customer
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Customer"
        "404":
          description: Customer not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerNotFound"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      description: Updates a Customer
      requestBody:
        description: Customer to upgrade
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Customer"
      parameters:
        - name: customerId
          in: path
          description: Identifier for a Customer
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Customer successfully updated
        "404":
          description: Customer not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerNotFound"
    delete:
      description: Deletes a Customer
      parameters:
        - name: customerId
          in: path
          description: Identifier for a Customer
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Customer successfully deleted
        "404":
          description: Customer not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerNotFound"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              
  /carts:
    get:
      description: Returns a collection of carts
      responses:
        "200":
          description: A collection of carts
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Carts"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      description: Adds a new cart
      requestBody:
        description: cart to add
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Cart"
      responses:
        "201":
          description: Cart successfully created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cart"
        "303":
          description: See Other
          headers:
            Location:
              schema:
                type: string
              description: Location of an existing cart
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
  "/carts/{ownedBy}":
    get:
      description: Returns an cart
      parameters:
        - name: ownedBy
          in: path
          description: Identifier for a Cart's Owner
          required: true
          schema:
            type: string
      responses:
        "200":
          description: A Cart
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cart"
        "404":
          description: Cart not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CartNotFound"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      description: Updates a Cart
      requestBody:
        description: Cart to update
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Cart"
      parameters:
        - name: ownedBy
          in: path
          description: Identifier for a Cart's Owner
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Cart successfully updated
        "404":
          description: Cart not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CartNotFound"
    delete:
      description: Deletes an Cart
      parameters:
        - name: ownedBy
          in: path
          description: Identifier for a Cart's Owner
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Cart successfully deleted
        "404":
          description: Cart not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CartNotFound"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
                
  /cartsitems:
    get:
      description: Returns a collection of a cart's items
      responses:
        "200":
          description: A collection of cart's items
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CartItems"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      description: Adds a new collection of Cart Items
      requestBody:
        description: cart to add
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CartItems"
      responses:
        "201":
          description: Cart Items successfully created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CartItems"
        "303":
          description: See Other
          headers:
            Location:
              schema:
                type: string
              description: Location of an existing set of cart items
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
  "/cartsitems/{belongsTo}":
    get:
      description: Returns a cart's items
      parameters:
        - name: belongsTo
          in: path
          description: Identifier for a specific cart
          required: true
          schema:
            type: string
      responses:
        "200":
          description: A Cart's items
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CartItems"
        "404":
          description: Cart not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CartItemsNotFound"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      description: Updates a Cart's Items
      requestBody:
        description: Cart Items to update
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CartItems"
      parameters:
        - name: belongsTo
          in: path
          description: Identifier for a specific cart
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Cart Items successfully updated
        "404":
          description: Cart Items not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CartItemsNotFound"
    delete:
      description: Deletes a Cart's Items
      parameters:
        - name: belongsTo
          in: path
          description: Identifier for a specific cart
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Cart Items successfully deleted
        "404":
          description: Cart Items not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CartItemsNotFound"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

components:
  schemas:
    Item:
      type: object
      properties:
        itemId:
          type: string
          format: uuid
        name:
          type: string
          maxLength: 50
        description:
          type: string
          maxLength: 50
        price:
          type: number
          format: floating
      example:
        itemId: def5cd03-7bf4-49e9-8f0b-380f90c86ec1
        name: "Drake Bulldogs Sweatshirt"
        description: Get comfortable in these sweats and look fly while wearing them
        price: 19.99
    Items:
      type: array
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/Item"
      example:
        - itemId: def5cd03-7bf4-49e9-8f0b-380f90c86ec1
          name: "Drake Bulldogs Sweatshirt"
          description: Get comfortable in these sweats and look fly while wearing them
          price: 19.99
        - itemId: 504550bc-d21e-43c3-8767-0c1bd59a173c
          name: "Drake Bulldogs Sweatpants"
          description: Get comfortable in these sweats and look fly while wearing them
          price: 19.99
    ItemNotFound:
      type: object
      properties:
        statusCode:
          type: integer
        error:
          type: string
        message:
          type: string
      example:
        statusCode: 404
        error: Not Found
        message: Item not found
    Error:
      type: object
      properties:
        statusCode:
          type: integer
        error:
          type: string
        message:
          type: string
      example:
        statusCode: 500
        error: Unexpected Error
        message: An unexpected error occurred while processing your request
    Customer:
      type: object
      properties:
        customerId:
          type: string
          format: uuid
        firstName:
          type: string
          maxLength: 50
        lastName:
          type: string
          maxLength: 50
        email:
          type: string
          maxLength: 50
        phoneNumber:
          type: string
          maxLength: 30
      example:
        customerId: 504550bc-d21e-43c3-8767-0c1bd59a173d
        firstName: "Braddie Boy"
        lastName: "The King"
        email: "JBrad@email.com"
        phoneNumber: "9-999-9999"
    Customers:
      type: array
      properties:
        customers:
          type: array
          customers:
            $ref: "#/components/schemas/Customer"
      example:
        - customerId: 504550bc-d21e-43c3-8767-0c1bd59a173d
          firstName: "Braddie Boy"
          lastName: "The King"
          email: "JBrad@email.com"
          phoneNumber: "9-999-9999"
        - customerId: 504550bc-d21e-43c3-8767-0c1bd59a892c
          firstName: "The"
          lastName: "Loafman"
          email: "IAmBreadie@email.com"
          phoneNumber: "1-111-1111"
    CustomerNotFound:
      type: object
      properties:
        statusCode:
          type: integer
        error:
          type: string
        message:
          type: string
      example:
        statusCode: 404
        error: Not Found
        message: Customer not found
    Cart:
      type: object
      properties:
        ownedBy:
          type: object
          customers:
            $ref: "#/components/schemas/Customer"
        dateCreated:
          type: string
        datePurchased:
          type: string
      example:
        ownedBy: "Object Reference to Customer"
        dateCreated: "01/30/2020"
        datePurchased: "02/01/2020"
    Carts:
      type: array
      properties:
        customers:
          type: array
          customers:
            $ref: "#/components/schemas/Cart"
      example:
        - ownedBy: "Object Reference to Customer"
          dateCreated: "01/30/2020"
          datePurchased: "02/01/2020"
        - ownedBy: "Object Reference to Customer"
          dateCreated: "01/30/2019"
          datePurchased: "02/01/2019"
    CartNotFound:
      type: object
      properties:
        statusCode:
          type: integer
        error:
          type: string
        message:
          type: string
      example:
        statusCode: 404
        error: Not Found
        message: Cart not found
    CartItems:
      type: object
      properties:
        cartItemId:
          type: object
          cart:
            $ref: "#/components/schemas/Cart"
        item:
          type: object
          item:
            $ref: "#/components/schemas/Item"
        quantity:
          type: integer
      example:
        - belongsTo: "Cart Object Reference"
          item: "Object reference to an Item"
          quantity: 50
          item: "Object reference to an Item"
          quantity: 100
        - belongsTo: "Cart Object Reference"
          item: "Object reference to an Item"
          quantity: 100
          item: "Object reference to an Item"
          quantity: 50
    CartItemsNotFound:
      type: object
      properties:
        statusCode:
          type: integer
        error:
          type: string
        message:
          type: string
      example:
        statusCode: 404
        error: Not Found
        message: Cart Items not found